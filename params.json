{"name":"Ff3xgui","tagline":"A GUI for the FF32 chip from flyfish, with a scripting language","body":"\r\n<html>\r\n<head>\r\n\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n<style type=\"text/css\">\r\n\r\n</style>\r\n\r\n</head>\r\n\r\n<body>\r\n<center><br>\r\n<A href=\"https://github.com/CWRoos/FF3xGui/raw/master/FF3xGui.rar\">Download</A>\r\n</center><br>\r\n<P>This is a GUI for Programming the FF32 chip from <A \r\nhref=\"http://www.flyfish-tech.com/FF32/index.php\">FlyFish \r\nTechnologies</A></P>\r\n<P>It has an editor for writing and&nbsp;running FF3 Script \r\nfiles.</P>\r\n<P>The right part of the screen is for direct communication \r\nwith the FF32.</P>\r\n<P>&nbsp;</P>\r\n<P><IMG style=\"HEIGHT: 443px; WIDTH: 632px\" alt=\"\" \r\nsrc=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/TheGui.png\" width=953 height=600></P>\r\n<a name=\"A1\"></a><h1>2. The Gui</h1>\r\n<a name=\"A2\"></a><h2>2.1 Menus</h2>\r\n\r\n<P><STRONG>File Menu</STRONG> \r\n   ;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n  <P><STRONG>New</STRONG> ; Creates a new blank file<BR><STRONG>Open</STRONG> ; Opens an existing file<BR><STRONG>Save</STRONG> \r\n  ; Saves the file<BR><STRONG>Exit</STRONG> ;Exits the program</P>\r\n  <P>&nbsp;</P></BLOCKQUOTE>\r\n<P dir=ltr><STRONG>Edit Menu</STRONG> \r\n;&nbsp; (right clicking in the editor window pops up this menu as well)</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n  <P dir=ltr><STRONG>Undo</STRONG> ; Undo the last action in the editor<BR><STRONG>Redo</STRONG> ; Cancel the \r\n  Undo action<BR><STRONG>Cut</STRONG> ; Cuts the selection in the clipboard<BR><STRONG>Copy</STRONG> : Copies the \r\n  selection to the clipboard<BR><STRONG>Paste</STRONG> ; Paste at the current cursor \r\n  location<BR><STRONG>Select All</STRONG>  ; Selects the entire editor \r\n  window contents</P>\r\n  <P dir=ltr><EM></EM>&nbsp;</P></BLOCKQUOTE>\r\n  <P dir=ltr><STRONG>Tools Menu</STRONG>  ;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n  <P dir=ltr><STRONG>Run </STRONG> ; Runs the current script<BR><STRONG>Stop</STRONG> ; Stops \r\n  running<BR><STRONG>Set Font</STRONG>  ; Changes the Font and color of the editor \r\n  window<BR><STRONG>Create HEX File</STRONG>   ; Opens a new window to type hex bytes to save as a \r\n  bin file, or as a hex file with HEX digits.<BR><STRONG>Split File</STRONG> ; Splits a \r\n  file in multiple files of max number of bytes, small window will pop up in the \r\n  editor window left above, \r\n  asking for the max number of bytes in each file, numbers will be added \r\n  to the original file name.<BR><STRONG>Hex to Bin</STRONG> ; Converts \r\n  a file of hex digits into a binary file, only lines containing only hex digits \r\n  (0-9, a-f, A-F) will be converted \r\n  If a line has an odd number of characters then a zero will be inserted at the \r\n  beginning of the line.<BR><STRONG>Intel HEX to \r\n  BIN</STRONG>    ; Converts an Intel hex file into \r\n  a binary file, data part only, addresses etc will be ignored.</P>\r\n  <P dir=ltr>  &nbsp;</P></BLOCKQUOTE>\r\n  <P dir=ltr><STRONG>Help Menu</STRONG>  ;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n  <P dir=ltr><STRONG>Help</STRONG> ; Shows this help file<BR><STRONG>Help Index</STRONG> ; \r\n  Shows this help file index</P>\r\n  <P dir=ltr>  &nbsp;</P></BLOCKQUOTE>\r\n<a name=\"A3\"></a><h2>2.2 Tools</h2>\r\n\r\n<P>The tools bar ;</P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/tools menu.png\"></P>\r\n<P>First block is New, Open and Save</P>\r\n<P>Second block is Cut, Copy and Paste</P>\r\n<P>Third block is Zoom and Zoom out in the editor window, \r\n(makes text bigger + or smaller -)</P>\r\n<P>Fourth block is running the script.</P>\r\n<P>Last block is stopping the script</P>\r\n<P>&nbsp;</P>\r\n<a name=\"A4\"></a><h2>2.3 InterActive</h2>\r\n\r\n\r\n<P>The right part of the screen is the interactive part&nbsp;for direct communication \r\nwith the FF32.</P>\r\n<P>The Output window below shows the result of the actions, the clear button \r\nclears this window.</P>\r\n<P><STRONG>About</STRONG> ; </P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/about.png\"></P>\r\n<P>Shows the number of devices connected, the 1st device and \r\nthe firmware version.<BR>You can get and set the USB address for the device, \r\nVendor name, Product and Serial Number.<BR>Can write anything you want and click \r\non Set to Save it in the ff32</P>\r\n<P><STRONG>Dig OUT ;</STRONG></P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/DigOut.png\"></P>\r\n<P>Here you can set pins high or low (1 or 0)<BR>Or set a \r\nwhole block or several pins in a block (A or B) at once.<BR>Only the pins with \r\nEnabled checked will be affected.</P>\r\n<P><STRONG>Dig IN</STRONG>;</P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/DigIn.png\"></P>\r\n<P>Read the value, low or high from a pin or read more pins \r\nfrom a block or a whole block.<BR>Only pins with Enabled set will be read.</P>\r\n<P><STRONG>PWM</STRONG>;</P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/pwm.png\"></P>\r\n<P>Sets one to 4 of the A block pins as PWM, from 0 to \r\n100%<BR>Stop All will set all 4 to 0%, Set All will set all 4 pins at once with \r\nthe specified %</P>\r\n<P><STRONG>Analog IN</STRONG>;</P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/analogin.png\"></P>\r\n<P>Gets the Analog input from one of the B pins.<BR>Plot \r\nwill start sampling the pin and plots a graphical (Simple Scope) <BR>Stop, \r\nstops sampling and plotting.</P>\r\n<P><STRONG>SPI</STRONG>;</P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/spi.png\"></P>\r\n<P>For SPI serial communication.<BR>First Set the pins to \r\nuse for CS, SCK, MOSI and MISO.<BR>Read will read the SPI port (Data Length \r\nbytes),&nbsp;if there is data in the Data to Write or Write before Read \r\npart<BR>Then this data will be send out before the read starts<BR>Write will \r\nwrite out the data in the Data to Write or Write before Read part<BR>Load will \r\nload a file in the Data to Write or Write before Read part (max 60 \r\nbytes)<BR>Save will save the Data to Write or Write before Read part to \r\ndisk<BR>Data length is the max number of bytes to read. (max 60 bytes)<BR>ASCII \r\nor HEX can be set to set the Data to Write or Write before Read part in ASCII or \r\nHEX mode.<BR>Type only HEX Digits in hex mode or data might be lost.</P>\r\n<P><STRONG>I2C</STRONG>;</P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/i2c.png\"></P>\r\n<P>For&nbsp;I2C serial communication.<BR>First Set the pins \r\nto use for SCL and SDA<BR>Read will read the I2C port (Data Length \r\nbytes),&nbsp;if there is data in the Data to Write or Write before Read \r\npart<BR>Then this data will be send out before the read starts<BR>Write will \r\nwrite out the data in the Data to Write or Write before Read part<BR>Load will \r\nload a file in the Data to Write or Write before Read part (max 60 \r\nbytes)<BR>Save will save the Data to Write or Write before Read part to \r\ndisk<BR>Data length is the max number of bytes to read. (max 60 bytes)<BR>ASCII \r\nor HEX can be set to set the Data to Write or Write before Read part in ASCII or \r\nHEX mode.<BR>Type only HEX Digits in hex mode or data might be lost.</P>\r\n<P><STRONG>1-Wire</STRONG>;</P>\r\n<P><IMG alt=\"\" src=\"https://raw.githubusercontent.com/CWRoos/FF3xGui/master/wire1.png\"></P>\r\n<P>For&nbsp;1Wire serial communication.<BR>First Set the \r\npin to use for DQ<BR>Read will read the&nbsp;1Wire port (Data Length \r\nbytes),&nbsp;if there is data in the Data to Write or Write before Read \r\npart<BR>Then this data will be send out before the read starts<BR>Write will \r\nwrite out the data in the Data to Write or Write before Read part<BR>Load will \r\nload a file in the Data to Write or Write before Read part (max 60 \r\nbytes)<BR>Save will save the Data to Write or Write before Read part to \r\ndisk<BR>Data length is the max number of bytes to read. (max 60 bytes)<BR>ASCII \r\nor HEX can be set to set the Data to Write or Write before Read part in ASCII or \r\nHEX mode.<BR>Type only HEX Digits in hex mode or data might be lost.<BR>Reset \r\nwill reset the port<BR>Write bit 1, writes a 1, Write bit 0 writes a 0 and read \r\nbit reads one bit.</P>\r\n<a name=\"A5\"></a><h1>3. Scripting</h1>\r\n<a name=\"A6\"></a><h2>3.1 Introduction</h2>\r\n\r\n<P>FF32 Scripting is a simple scripting langue to controll all the ff32 \r\nfunctions.</P>\r\n<P>It can cotroll all the pins, as well as analog in, PWM, SPI, I2C and \r\n1Wire</P>\r\n<P>A blinking LED script looks like this;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr><FONT color=#808080 size=4>\r\n  <P>do<BR>a1 = 1<BR>sleep<BR>a1=0<BR>sleep<BR>loop</P></BLOCKQUOTE></FONT>\r\n<P dir=ltr>This will blink a LED on pin A1 every second</P>\r\n<P dir=ltr>&nbsp;</P>\r\n<a name=\"A7\"></a><h2>3.2 Expressions</h2>\r\n\r\n\r\n<P><STRONG>String expressions consists \r\nof strings and/or numeric expressions.</STRONG></P>\r\n<P><STRONG>Numeric Expressions</STRONG></P>\r\n<P>These are just numbers and calculations<BR>Numbers can be entered as decimal, \r\nhex and binary<BR>Hex numbers Start with an x, like xBA4C<BR>Binary numbers \r\nstarts with an n like n1001101</P>\r\n<P>Valid numbers are ; 1234545, x23FDE, xfde34, n11001, X45F, N1101&nbsp;etc.</P>\r\n<P><BR>Negative numbers like -23 are not allowed, because you work with bytes \r\nmost and so is xFF 255 or -1, so it will always be 255<BR>Calculations can \r\nresult in negative numbers, like 1-2 results in -1, and they can be stored in \r\nthe S variables, but when used they will be converted to positive with most of \r\nthe commands.</P>\r\n<P><STRONG>Calculations</STRONG></P>\r\n<P>There are a few math calculations;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n  <P>+&nbsp; &nbsp;Plus, adding<BR>-&nbsp;&nbsp; &nbsp;minus, \r\n  substation<BR>*&nbsp;&nbsp;&nbsp; Multiply<BR>/&nbsp;&nbsp;&nbsp; \r\n  Division<BR>%&nbsp; Mod<BR>^&nbsp;&nbsp;&nbsp; \r\n  Power<BR>&amp;&nbsp;&nbsp;Bitwise And<BR>|&nbsp;&nbsp;&nbsp; Bitwise \r\nOr</P></BLOCKQUOTE>\r\n<P dir=ltr>Valid numerical calculations are ; 12 + 56 / 7, xFF * 3, n101 + xB, \r\nn11 ^ 2, nFF &amp; 3 | A1 etc.&nbsp; (A1 is pin A1 on the FF32)</P>\r\n<P dir=ltr>&nbsp;</P>\r\n<P dir=ltr><STRONG>String Expressions</STRONG></P>\r\n<P dir=ltr>String expressions consist of strings and/or \r\nnumeric expressions, separated by a , (comma)<BR>String go between \"</P>\r\n<P dir=ltr>\"Hello \",1234,\" world\"&nbsp;&nbsp;&nbsp; will \r\ngive a string as 'Hello 1234 World'</P>\r\n<P dir=ltr>\"hello \",xBAB&nbsp; will result in 'Hello \r\n2987'</P>\r\n<P dir=ltr>\"Port A1 is ; \",A1&nbsp; will give 'Port A1 is ; \r\n&lt;value of port A1, 1 or 0&gt;'</P>\r\n<P dir=ltr>\"abc\", 5 * 10 , \"def\"&nbsp;&nbsp; will be \r\n'abc50def'</P>\r\n<P dir=ltr>&nbsp;</P>\r\n<P dir=ltr><STRONG>HEX Strings</STRONG></P>\r\n<P dir=ltr>Hex digits can be entered between [] like \r\n[a34bc3f] or [34DEF6CD]</P>\r\n<P dir=ltr>These are separate stings and cannot be used in \r\ncalculations and string expressions</P>\r\n<P dir=ltr>Intern they are converted to binary when used, \r\nwhen the length is odd, a zero will be inserted at front.</P>\r\n<P dir=ltr>&nbsp;</P>\r\n<P dir=ltr><STRONG>Compare Expressions \r\n(Conditions)</STRONG></P>\r\n<P dir=ltr>A comparison consist of 2 numeric \r\nexpressions and one compare instruction between&nbsp;{} like {5 = 6}<BR> \r\n They return false or true \r\nand can only be used with the IF and LOOP UNTIL commands</P>\r\n<P dir=ltr>Only 3 compare instructions are available;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P dir=ltr>=&nbsp;&nbsp;&nbsp; Equal (if is the \r\n  same)<BR>&lt;&nbsp;&nbsp;&nbsp; Les than (if \r\n  smaller)<BR>&gt;&nbsp;&nbsp;&nbsp; Greater than (if bigger)</P></BLOCKQUOTE>\r\n<P dir=ltr>Some examples are;&nbsp; (A1=1)&nbsp; (34 &gt; \r\n67)&nbsp; (3*6+1 = 56)&nbsp; etc.</P>\r\n<P dir=ltr>&nbsp;</P>\r\n<a name=\"A8\"></a><h2>3.3 Variables</h2>\r\n\r\n\r\n<P> \r\n All variables are predefined.</P>\r\n<P> \r\n Most imported are the port pins as variables, these are A1 \r\n.. A6 and B1 .. B12</P>\r\n<P> \r\n These are 1 bit variables, are only 1 or 0, they can be \r\nset like A1=&lt;numeric expression)<BR>When the result of the numeric \r\nexpression is not 1 or zero, then it will be compared to<BR>the half of the \r\nvoltage, so when powered with 5 volts, the pin will be set to zero if \r\nthe<BR>result is below 2.5,when the power is 3.3 volt, then zero is below \r\n1.5</P>\r\n<P> \r\n When used in expressions, they will return the state of the \r\npin, always 1 or 0.</P>\r\n<P> \r\n Examples ;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P><FONT color=#808080>A1=0<BR>B10 = 1<BR>a3 = a3 | \r\n  a1<BR>b12 = 5 * 6</FONT></P>\r\n<P><FONT color=#808080></FONT>&nbsp;</P></BLOCKQUOTE>\r\n<P dir=ltr><FONT color=#000000>Then there are 2 special \r\nblock variables, AB and BB, the set or read a whole block.<BR>When set they need \r\n2 numeric expressions, the mask and the data, when read they need only the \r\nmask.</FONT></P>\r\n<P dir=ltr> \r\n Like AB=&lt;mask&gt; &lt;data&gt;&nbsp; Ports \r\nwhere the mask is 0 will not be affected.</P>\r\n<P dir=ltr> \r\n Examples ;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P dir=ltr><FONT color=#808080>AB =     3 \r\n  1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n  Will set A1 to 1 and A2 to zero <BR>BB = n101 n100&nbsp;&nbsp;&nbsp;&nbsp; \r\n  Will set B3 to one and B1 to \r\n  zero<BR>BBn1010&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Will \r\n  return the pins of B2 and B4, when both are low it return zero, when both are \r\n  high it returns 10 (decimal)</FONT></P>\r\n<P dir=ltr><FONT color=#808080></FONT>&nbsp;</P></BLOCKQUOTE>\r\n<P dir=ltr><FONT color=#000000>Then \r\nthere are 12 analog pin variables, BA1 .. BA12,&nbsp;they are read only and \r\nreturns the voltage from the pin.</FONT></P>\r\n<P dir=ltr>Examples ;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P dir=ltr><FONT color=#808080>BA10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n  Returns the voltage on pin B10<BR>ba9 * 10&nbsp;&nbsp;&nbsp;&nbsp; Returns the \r\n  voltage on pin B9 multiplied by 10<BR>BA1 / 100&nbsp;&nbsp; Returns the \r\n  voltage from pin 1 devided by 100</FONT></P>\r\n<P dir=ltr><FONT color=#808080></FONT>&nbsp;</P></BLOCKQUOTE>\r\n<P dir=ltr><FONT color=#000000>There are \r\n9 predefined (double) variables, S1 .. S9<BR>They can be write and read and can \r\ncontain negative numbers as well as result of an expression.<BR>But -1 be \r\nconverted to 1 when used as byte and not 255</FONT></P>\r\n<P dir=ltr>Examples ;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P dir=ltr><FONT color=#808080>S4 =      12.7<BR>s1 = 5 / \r\n  2<BR>S2 = S1 * S4</FONT></P>\r\n<P dir=ltr><FONT color=#808080></FONT>&nbsp;</P></BLOCKQUOTE>\r\n<P dir=ltr><FONT color=#000000>Then \r\nthere are 4 \r\nbuffers of 60 bytes, Buffa .. Buffb</FONT></P>\r\n<P dir=ltr>They can be filled with a string expression or \r\nwith a HEX string.<BR>They can be used in string expressions as well.</P>\r\n<P dir=ltr>And they can be accessed by index like BUFFA(4)</P>\r\n<P dir=ltr>Examples ;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P dir=ltr><FONT color=#808080>BUFFA = \r\n  [45def45ab]<BR>buffb = \"Port B12 is ; \",b12<BR>Buffd = \"Buffa = \",buffa<BR>buffa(5)=12<BR > BUFFD(4) = \r\n  BUFFA(5)</FONT></P>\r\n<P dir=ltr><FONT color=#808080></FONT>&nbsp;</P></BLOCKQUOTE>\r\n<P dir=ltr>And then there is a read only variable V, which \r\ncontains the power, 5 or 3.3</P>\r\n<P dir=ltr>&nbsp;</P>\r\n<a name=\"A9\"></a><h2>3.4 Commands</h2>\r\n\r\n<P> \r\n Commands / Statements are always the first in a \r\nline.</P>\r\n<P> \r\n Case don't matter, can be uppercase or lowercase or \r\ncombination.</P>\r\n<P><STRONG>'</STRONG> is the \r\n remark symbol, a line beginning with ' will be \r\nignored.</P>\r\n<P> \r\n Commands are ;</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>WRITE</STRONG> \r\n(filename) BUFFx&nbsp;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>Writes a buffer, \r\n  BUFFA .. BUFFD, to a file (filename)<BR>Filename can be a string expression as \r\n  well<BR>write (test.txt) buffa<BR>write (\"test\",s1,\".txt\") buffb</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>READ</STRONG> \r\n(filename) BUFFx</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>Reads a file into a \r\n  buffer, BUFFA .. BUFFD<BR>Filename can be a string expression as well<BR>If the \r\n  file exists it reads max 60 bytes<BR>read&nbsp;(test.txt) \r\n  buffa<BR>read&nbsp;(\"test\",s1,\".txt\") buffb</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>PRINT</STRONG> \r\n&lt;D/S/X/N&gt; (string expression) or (numeric expression)</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>Prints a string \r\n  expression or numeric expression to the output screen on the right \r\n  below.<BR>&lt;D/S/X/N&gt; is optional, only one of them, no combinations<BR>If \r\n  D then it will force to print decimal&nbsp; &gt; print d&nbsp;5 * 10 \r\n  &nbsp;&gt; 50<BR>If S it will force to print as a string &gt; print s \"hello \r\n  world\" &gt; hello world<BR>If X it will force to print as HEX &gt; print x 255 \r\n  &gt; FF<BR>if N Then it will print the result as binary &gt; print n xa &gt; \r\n  1010</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>Default is decimal \r\n  or string, depending on the expression to print.</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>SLEEP</STRONG> \r\n&lt;numeric expression&gt;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>Sleeps for 1 second \r\n  default, or when numeric expression is present, it sleeps for the result of \r\n  the expression in milliseconds.</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>sleep &gt; sleeps \r\n  one second<BR>sleep 500 &gt; sleeps 500 \r\nmilliseconds</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>WAIT</STRONG>&nbsp;pin= \r\n 0/1 &lt;numeric expression&gt;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nwait     \r\n(sleeps) until the \r\n  pin goes high or low, numeric expression is optimal en is the max \r\n  milliseconds to wait.<BR>wait b1 = 0&nbsp; &gt;&nbsp;&nbsp; &nbsp;waits \r\n  until pin b1 becomes zero.<BR>wait a1 =  1&nbsp; 500&nbsp;&nbsp;&nbsp; &gt;&nbsp; \r\n  waits until pin a1 goes high or 500 milliseconds, whatever comes     \r\nfirst.</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>PWM</STRONG> \r\npinA&nbsp; numeric     \r\nexpression</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nSets the PWM on one \r\n  of the A pins (A1 .. A6)<BR>Numeric expression is the percentage (0 .. \r\n  100%)<BR>Greater than 100 will always be 100<BR>pwm a2 50&nbsp;&nbsp; .&nbsp; \r\n  sets&nbsp;PWM on a2 at 50%<BR>pwm a1 50 / 2&nbsp;&nbsp; &gt;&nbsp; \r\n  sets&nbsp;PWM on pin a1 at     \r\n25%</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>SPI \r\nSET</STRONG> pin1 pin2 pin3 pin4 (CS,SCK,MOSI,MISO)</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nSets the pins used \r\n  for SPI, can be any pin (A1 .. A6, B1 .. B12)<BR>pin1 - \r\n  CS, pin2 - SCK, pin3 - MOSI and pin4 - MISO<BR>spi set a1 a2 a3 a4&nbsp; &gt; sets SPI pins \r\n  (a1 .. a4) resp     \r\n(CS,SCK,MOSI,MISO)</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n&nbsp;</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>SPI \r\nWRITE</STRONG> (string expression) or     \r\n(HEX     \r\nString)</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nWrites the string \r\n  expression or hex string (max 60 bytes) to the SPI port<BR>spi write \"hello \r\n  world\"&nbsp;&nbsp; &gt; sends hello world out on SPI<BR>spi write \r\n  [f3ad56eb]&nbsp;&nbsp; &gt;&nbsp; writes an hex string to the&nbsp;SPI port     \r\nas     \r\nbinary</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>SPI \r\nREAD</STRONG> len BUFFx &lt;(string expression) or     \r\n(HEX     \r\nString)&gt;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nReads len number of \r\n  bytes from&nbsp;SPI in one of the buffers (BUFFA .. BUFFD)<BR>len is a numeric \r\n  expression max 60 If higher it will be 60<BR>When the string expression or hex \r\n  string is present, then this will be written before reading (max 60 \r\n  bytes)<BR>spi read 10 buffa&nbsp;&nbsp; &gt;&nbsp;&nbsp; reads 10 bytes from \r\n  SPI in buffa<BR>spi read 20 buffb \"hello\"&nbsp;&nbsp; &gt; writes hello to SPI \r\n  and then reads 20 bytes in buffb<BR>spi read 60 buffc [abcdef09]&nbsp; &gt; \r\n  writes the hex string as binary to SPI and then reads 60 bytes     \r\nin     \r\nbuffc</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>I2C \r\nSET</STRONG> pin1     \r\npin2     \r\n(SCL,SDA)</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nSets the pins used \r\n  for I2C, can be any pin (A1 .. A6, B1 .. B12)<BR>pin1 \r\n  -&nbsp;SCL and pin2 - SDA<BR>i2c set a1 a2&nbsp; &gt; sets SPI pins (a1 .. a2) \r\n     \r\nresp     \r\n(SCL,SDA)</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>I2C \r\nWRITE</STRONG> (string expression) or     \r\n(HEX     \r\nString)</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nWrites the string \r\n  expression or hex string (max 60 bytes) to the&nbsp;I2C port<BR>i2c write \r\n  \"hello world\"&nbsp;&nbsp; &gt; sends hello world out on I2C <BR>i2c write \r\n  [f3ad56eb]&nbsp;&nbsp; &gt;&nbsp; writes an hex string to the&nbsp;I2C port     \r\nas     \r\nbinary</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>I2C \r\nREAD</STRONG> len BUFFx &lt;(string expression) or     \r\n(HEX     \r\nString)&gt;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nReads len number of \r\n  bytes from&nbsp;I2C in one of the buffers (BUFFA .. BUFFD)<BR>len is a numeric \r\n  expression max 60 If higher it will be 60<BR>When the string expression or hex \r\n  string is present, then this will be written before reading (max 60 \r\n  bytes)<BR>i2c&nbsp;read 10 buffa&nbsp;&nbsp; &gt;&nbsp;&nbsp; reads 10 bytes \r\n  from&nbsp;I2C in buffa<BR>i2c&nbsp;read 20 buffb \"hello\"&nbsp;&nbsp; &gt; \r\n  writes hello to I2C and then reads 20 bytes in buffb<BR>i2c read 60 buffc \r\n  [abcdef09]&nbsp; &gt; writes the hex string as binary to&nbsp;I2C and then \r\n  reads 60 bytes     \r\nin     \r\nbuffc</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>1WIRE \r\nSET</STRONG>     \r\n     \r\npin</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nSets the pin used \r\n  for 1Wire (DQ), can be any pin (A1 .. A6, B1 .. B12)<BR>1wire set \r\n  b1&nbsp;&nbsp; &gt; sets b1 to be uses as DQ pin     \r\nfor     \r\n1Wire</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>1WIRE \r\nWRITE</STRONG> (string expression) or     \r\n(HEX     \r\nString)</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nWrites the string \r\n  expression or hex string (max 60 bytes) to the&nbsp;1Wire \r\n  port<BR>1wire&nbsp;write \"hello world\"&nbsp;&nbsp; &gt; sends hello world out \r\n  on&nbsp;1Wire <BR>1wire write [f3ad56eb]&nbsp;&nbsp; &gt;&nbsp; writes an hex \r\n  string to the&nbsp;1Wire port     \r\nas     \r\nbinary</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>1WIRE \r\nWRITEB</STRONG>     \r\nnumeric     \r\nexpression</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nWrites one bit (1 or \r\n  0) out to the 1Wire port<BR>When the result of the numeric expression is not 1 \r\n  or zero, then it will be compared to<BR>the half of the \r\n  voltage, so when powered with 5 volts, the pin will be set to zero if the<BR \r\n  >result is below 2.5,when the power is 3.3 volt, then zero \r\n  is below 1.5<BR>     \r\n 1wire writeb 0&nbsp;&nbsp; &gt;&nbsp; \r\n  send a zero out     \r\nto     \r\n1Wire</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>1WIRE \r\nREAD</STRONG>     \r\n    len \r\n  BUFFx &lt;(string expression) or     \r\n(HEX     \r\nString)&gt;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nReads len number of \r\n  bytes from&nbsp;1Wire in one of the buffers (BUFFA .. BUFFD)<BR>len is a numeric \r\n  expression max 60 If higher it will be 60<BR>When the string expression or hex \r\n  string is present, then this will be written before reading (max 60 \r\n  bytes)<BR>1wire&nbsp;read 10 buffa&nbsp;&nbsp; &gt;&nbsp;&nbsp; reads 10 bytes \r\n  from&nbsp;1Wire in buffa<BR>1wire&nbsp;read 20 buffb \"hello\"&nbsp;&nbsp; \r\n  &gt; writes hello to&nbsp;1Wire and then reads 20 bytes in buffb<BR>1wire&nbsp;read 60 buffc \r\n  [abcdef09]&nbsp; &gt; writes the hex     \r\nstring as binary to&nbsp;1Wire and \r\n  then reads 60 bytes     \r\nin     \r\nbuffc</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>1WIRE \r\nREADB</STRONG>     \r\n     \r\n          \r\n     \r\nSx</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nReads one bit (0 or \r\n  1) from the 1Wire port in a Sx variable (S1 .. S9)<BR>1wire readb \r\n  s3&nbsp;&nbsp;&nbsp;     \r\n&gt;&nbsp; reads one bit from \r\n  the one wire port     \r\nin     \r\ns3</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>1WIRE \r\nRESET</STRONG>     \r\n     \r\n          \r\n     \r\n</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n    Resets the     \r\n1Wire     \r\nport</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>IF</STRONG>     \r\n     \r\n     {compare     \r\nexpression}     \r\nstatement</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\nThe statement will be \r\n  executed when the compare expression returns true<BR>if {a1 =0} print \"A1 is \r\n  low\"&nbsp;&nbsp;&nbsp;&gt; &nbsp;will print A1 is&nbsp;low when pin a1 is \r\n  0<BR>if {a1 =1} print \"A1 is high\"&nbsp;&nbsp;&gt;&nbsp; will print A1 \r\n  is&nbsp;high when pin a1     \r\nis     \r\n1</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>DO \r\n</STRONG>     \r\n     \r\n          \r\n     \r\n</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\nStarts a loop, \r\n  defines where a loop jumps back to, if there is no LOOP, it will just do \r\n  nothing.<BR>do&nbsp;&nbsp;&nbsp; &gt; Defines the do     \r\n     \r\n          \r\n     \r\nlocation</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>LOOP</STRONG> \r\n&lt;numeric     \r\n     \r\n          \r\n     \r\nexpression&gt;</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\nEnd of a loop, jumps \r\n  back to just after the DO<BR>When numeric expression is present then it will \r\n  jump result of expression times.<BR>loop&nbsp;&nbsp; &gt; jumps back to the \r\n  line after DO<BR>loop 10&nbsp; &gt; loops 10 times. and then continues with \r\n  the following     \r\n     \r\n          \r\n     \r\nlines</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\n&nbsp;</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG>LOOP \r\nUNTIL</STRONG> {compare     \r\n     \r\n          \r\n     \r\nexpression}</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n     \r\n          \r\n     \r\nLoops back to DO \r\n  when the compare expression returns false<BR>loop until {a3 = 0}&nbsp;&nbsp; Jumps \r\n  back to the line after DO when pin a3 is 1, else it just \r\ncontinues.<BR>     \r\n     \r\n          \r\n     \r\n</P></BLOCKQUOTE>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG><FONT color=#ff0000><FONT size=4>Nested loops are not implemented, LOOP will jump back \r\nto the last encountered DO</FONT> </FONT></STRONG>     \r\n     \r\n          \r\n     \r\n</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><STRONG><FONT color=#ff0000></FONT></STRONG>     \r\n     \r\n          \r\n     \r\n&nbsp;</P>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr><FONT color=#000000><STRONG>END</STRONG>&nbsp; </FONT>     \r\n     \r\n          \r\n     \r\n</P>\r\n<BLOCKQUOTE style=\"MARGIN-RIGHT: 0px\" dir=ltr>\r\n<P style=\"MARGIN-RIGHT: 0px\" dir=ltr>     \r\n            \r\n     \r\nIf used inside a \r\n  loop, it will end the loop and&nbsp;jump to the line after the loop<BR>if used \r\n  outside a loop it will end (stops) the     \r\n     \r\n          \r\n     \r\nscript.</P></BLOCKQUOTE>\r\n<a name=\"A10\"></a><h1>4. Examples</h1>\r\n<a name=\"A11\"></a><h2>4.1 Blinky</h2>\r\n\r\n\r\n<P> \r\n Connect a LED on A1 and on A2 with a resistor, a pull up \r\nresistor and a switch to gnd on B1<BR>Run this script and the leds start blinking \r\nuntil you push the switch.</P>\r\n\r\n<P> \r\n ' blink 2 LEDs on A1 and A2 until B1 = \r\n0<BR>do<BR>a1=1<BR>a2=0<BR>sleep<BR>a1=0<BR>a2=1<BR>sleep<BR>loop until {b1=  \r\n             0}</P>\r\n<a name=\"A12\"></a><h2>4.2 Temperture</h2>\r\n\r\n<P>Reads the temperature from a DS18B20 by 1wire on pin B1.<BR>It keeps looping, \r\nso press stop to stop it</P>\r\n<P>&nbsp;</P>\r\n<P><EM>' reads temp from 1wire device DS18B20 on pin \r\nB1<BR>s2 = 1-2<BR>1wire set b1<BR>do<BR>1wire write [cc44]<BR>sleep<BR>1wire \r\nread 9 buffa [ccbe]<BR>s1 = buffa(1) * 256 + buffa(0)<BR>if {buffa(1) &gt; 127} \r\ns1 = 65536 - s1<BR>s1 = s1 / 16<BR>if {buffa(1) &gt; 127} s1 = s1 * s2<BR>print \r\ns1<BR>loop</EM> \r\n <EM>             </EM></P>\r\n<a name=\"A13\"></a><h2>4.3 Servo</h2>\r\n\r\n<P><EM>This controls a servo via pin B1 with a \r\npotentiometer, The servo sits on pin A1</EM></P>\r\n<P><EM></EM>&nbsp;</P>\r\n<P><EM>' control a servo on pin A1 with a potentiometer \r\non B1<BR>do<BR>s2 = 100 / v<BR>s1 = ba1 * s2<BR>pwm a1 s1<BR>loop</EM> \r\n </P>\r\n<center><br>\r\n<A href=\"https://github.com/CWRoos/FF3xGui/raw/master/FF3xGui.rar\">Download</A>\r\n</center><br>\r\n</body>\r\n</html>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}